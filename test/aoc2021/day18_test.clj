(ns aoc2021.day18-test
  (:require [clojure.test :refer [are deftest is testing]]
            [clojure.java.io :as io]
            [aoc2021.day18 :refer [add
                                   apply-action
                                   example-input
                                   explode?
                                   magnitude
                                   parse-input
                                   solve-part1
                                   solve-part2
                                   split?
                                   to-vector
                                   tree]]))

(deftest works
  (testing "explode"
    (are
      [x y] (= (let [t (tree x)] (to-vector (apply-action (explode? t) t))) y)

      [[[[[9,8],1],2],3],4]                  [[[[0,9],2],3],4]
      [7,[6,[5,[4,[3,2]]]]]                  [7,[6,[5,[7,0]]]]
      [[6,[5,[4,[3,2]]]],1]                  [[6,[5,[7,0]]],3]
      [[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]  [[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]
      [[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]      [[3,[2,[8,0]]],[9,[5,[7,0]]]]))

  (testing "split"
    (are
      [x y] (= (let [t (tree x)] (to-vector (apply-action (split? t) t))) y)

      [[[[0,7],4],[15,[0,13]]],[1,1]]        [[[[0,7],4],[[7,8],[0,13]]],[1,1]]
      [[[[0,7],4],[[7,8],[0,13]]],[1,1]]     [[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]]))

  (testing "magnitude"
    (are
      [x y] (= (magnitude (tree x)) y)

      [[1,2],[[3,4],5]] 143
      [[[[5,0],[7,4]],[5,5]],[6,6]] 1137
      [[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]  3488))

  (testing "add"
    (are
      [x y z] (= (to-vector (add (tree x) (tree y))) z)

      [[[[4,3],4],4],[7,[[8,4],9]]]  [1,1]  [[[[0,7],4],[[7,8],[6,0]]],[8,1]]


      [[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
      [7,[[[3,7],[4,3]],[[6,3],[8,8]]]]                           ; +
      [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]])) ; =

  (testing "reduce"
    (are
      [x y]  (= x (to-vector (reduce add (map tree y))))

      [[[[1,1],[2,2]],[3,3]],[4,4]]  '([1,1] [2,2] [3,3] [4,4])
      [[[[5,0],[7,4]],[5,5]],[6,6]]  '([1,1] [2,2] [3,3] [4,4] [5,5] [6,6])

      [[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]
      '([[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
        [7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
        [[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
        [[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
        [7,[5,[[3,8],[1,4]]]]
        [[2,[2,2]],[8,[8,1]]]
        [2,9]
        [1,[[[9,3],9],[[9,0],[0,7]]]]
        [[[5,[7,4]],7],1]
        [[[[4,2],2],6],[8,7]])))

  (testing "with example input input"
    (let [input (parse-input example-input)]
      (is (= 4140 (solve-part1 input)))
      (is (= 3993 (solve-part2 input)))))

  (testing "with real input"
    (let [input (parse-input (slurp (io/resource "day18.txt")))]
      (is (= 3699 (solve-part1 input)))
      (is (= 4735 (solve-part2 input))))))
